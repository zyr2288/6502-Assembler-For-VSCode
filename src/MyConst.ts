
//#region 汇编码查询表
/**汇编码查询表 */
export const InstrumentTable: { [key: string]: number[] } = {
	//单操作       绝对        绝对Y       零页X        相对        相对Y
	//      立即数       绝对X       零页        零页Y        相对X       比较
	//imp,  imm,  abs,  abx,  aby,  zpg,  zpx,  zpy,  ind,  inx,  iny,  rel
	ADC: [-0x1, 0x69, 0x6d, 0x7d, 0x79, 0x65, 0x75, -0x1, -0x1, 0x61, 0x71, -0x1],		//ADC
	AND: [-0x1, 0x29, 0x2d, 0x3d, 0x39, 0x25, 0x35, -0x1, -0x1, 0x21, 0x31, -0x1],		//AND
	ASL: [0x0a, -0x1, 0x0e, 0x1e, -0x1, 0x06, 0x16, -0x1, -0x1, -0x1, -0x1, -0x1],		//ASL
	BCC: [-0x1, -0x1, -0x1, -0x1, -0x1, -0x1, -0x1, -0x1, -0x1, -0x1, -0x1, 0x90],		//BCC
	BCS: [-0x1, -0x1, -0x1, -0x1, -0x1, -0x1, -0x1, -0x1, -0x1, -0x1, -0x1, 0xb0],		//BCS
	BEQ: [-0x1, -0x1, -0x1, -0x1, -0x1, -0x1, -0x1, -0x1, -0x1, -0x1, -0x1, 0xf0],		//BEQ
	BIT: [-0x1, -0x1, 0x2c, -0x1, -0x1, 0x24, -0x1, -0x1, -0x1, -0x1, -0x1, -0x1],		//BIT
	BMI: [-0x1, -0x1, -0x1, -0x1, -0x1, -0x1, -0x1, -0x1, -0x1, -0x1, -0x1, 0x30],		//BMI
	BNE: [-0x1, -0x1, -0x1, -0x1, -0x1, -0x1, -0x1, -0x1, -0x1, -0x1, -0x1, 0xd0],		//BNE
	BPL: [-0x1, -0x1, -0x1, -0x1, -0x1, -0x1, -0x1, -0x1, -0x1, -0x1, -0x1, 0x10],		//BPL
	BRK: [0x00, -0x1, -0x1, -0x1, -0x1, -0x1, -0x1, -0x1, -0x1, -0x1, -0x1, -0x1],		//BRK
	BVC: [-0x1, -0x1, -0x1, -0x1, -0x1, -0x1, -0x1, -0x1, -0x1, -0x1, -0x1, 0x50],		//BVC
	BVS: [-0x1, -0x1, -0x1, -0x1, -0x1, -0x1, -0x1, -0x1, -0x1, -0x1, -0x1, 0x70],		//BVS
	CLC: [0x18, -0x1, -0x1, -0x1, -0x1, -0x1, -0x1, -0x1, -0x1, -0x1, -0x1, -0x1],		//CLC
	CLD: [0xd8, -0x1, -0x1, -0x1, -0x1, -0x1, -0x1, -0x1, -0x1, -0x1, -0x1, -0x1],		//CLD
	CLI: [0x58, -0x1, -0x1, -0x1, -0x1, -0x1, -0x1, -0x1, -0x1, -0x1, -0x1, -0x1],		//CLI
	CLV: [0xb8, -0x1, -0x1, -0x1, -0x1, -0x1, -0x1, -0x1, -0x1, -0x1, -0x1, -0x1],		//CLV
	CMP: [-0x1, 0xc9, 0xcd, 0xdd, 0xd9, 0xc5, 0xd5, -0x1, -0x1, 0xc1, 0xd1, -0x1],		//CMP
	CPX: [-0x1, 0xe0, 0xec, -0x1, -0x1, 0xe4, -0x1, -0x1, -0x1, -0x1, -0x1, -0x1],		//CPX
	CPY: [-0x1, 0xc0, 0xcc, -0x1, -0x1, 0xc4, -0x1, -0x1, -0x1, -0x1, -0x1, -0x1],		//CPY
	DEC: [-0x1, -0x1, 0xce, 0xde, -0x1, 0xc6, 0xd6, -0x1, -0x1, -0x1, -0x1, -0x1],		//DEC
	DEX: [0xca, -0x1, -0x1, -0x1, -0x1, -0x1, -0x1, -0x1, -0x1, -0x1, -0x1, -0x1],		//DEX
	DEY: [0x88, -0x1, -0x1, -0x1, -0x1, -0x1, -0x1, -0x1, -0x1, -0x1, -0x1, -0x1],		//DEY
	EOR: [-0x1, 0x49, 0x4d, 0x5d, 0x59, 0x45, 0x55, -0x1, -0x1, 0x41, 0x51, -0x1],		//EOR
	INC: [-0x1, -0x1, 0xee, 0xfe, -0x1, 0xe6, 0xf6, -0x1, -0x1, -0x1, -0x1, -0x1],		//INC
	INX: [0xe8, -0x1, -0x1, -0x1, -0x1, -0x1, -0x1, -0x1, -0x1, -0x1, -0x1, -0x1],		//INX
	INY: [0xc8, -0x1, -0x1, -0x1, -0x1, -0x1, -0x1, -0x1, -0x1, -0x1, -0x1, -0x1],		//INY
	JMP: [-0x1, -0x1, 0x4c, -0x1, -0x1, -0x1, -0x1, -0x1, 0x6c, -0x1, -0x1, -0x1],		//JMP
	JSR: [-0x1, -0x1, 0x20, -0x1, -0x1, -0x1, -0x1, -0x1, -0x1, -0x1, -0x1, -0x1],		//JSR
	LDA: [-0x1, 0xa9, 0xad, 0xbd, 0xb9, 0xa5, 0xb5, -0x1, -0x1, 0xa1, 0xb1, -0x1],		//LDA
	LDX: [-0x1, 0xa2, 0xae, -0x1, 0xbe, 0xa6, -0x1, 0xb6, -0x1, -0x1, -0x1, -0x1],		//LDX
	LDY: [-0x1, 0xa0, 0xac, 0xbc, -0x1, 0xa4, 0xb4, -0x1, -0x1, -0x1, -0x1, -0x1],		//LDY
	LSR: [0x4a, -0x1, 0x4e, 0x5e, -0x1, 0x46, 0x56, -0x1, -0x1, -0x1, -0x1, -0x1],		//LSR
	NOP: [0xea, -0x1, -0x1, -0x1, -0x1, -0x1, -0x1, -0x1, -0x1, -0x1, -0x1, -0x1],		//NOP
	ORA: [-0x1, 0x09, 0x0d, 0x1d, 0x19, 0x05, 0x15, -0x1, -0x1, 0x01, 0x11, -0x1],		//ORA
	PHA: [0x48, -0x1, -0x1, -0x1, -0x1, -0x1, -0x1, -0x1, -0x1, -0x1, -0x1, -0x1],		//PHA
	PHP: [0x08, -0x1, -0x1, -0x1, -0x1, -0x1, -0x1, -0x1, -0x1, -0x1, -0x1, -0x1],		//PHP
	PLA: [0x68, -0x1, -0x1, -0x1, -0x1, -0x1, -0x1, -0x1, -0x1, -0x1, -0x1, -0x1],		//PLA
	PLP: [0x28, -0x1, -0x1, -0x1, -0x1, -0x1, -0x1, -0x1, -0x1, -0x1, -0x1, -0x1],		//PLP
	ROL: [0x2a, -0x1, 0x2e, 0x3e, -0x1, 0x26, 0x36, -0x1, -0x1, -0x1, -0x1, -0x1],		//ROL
	ROR: [0x6a, -0x1, 0x6e, 0x7e, -0x1, 0x66, 0x76, -0x1, -0x1, -0x1, -0x1, -0x1],		//ROR
	RTI: [0x40, -0x1, -0x1, -0x1, -0x1, -0x1, -0x1, -0x1, -0x1, -0x1, -0x1, -0x1],		//RTI
	RTS: [0x60, -0x1, -0x1, -0x1, -0x1, -0x1, -0x1, -0x1, -0x1, -0x1, -0x1, -0x1],		//RTS
	SBC: [-0x1, 0xe9, 0xed, 0xfd, 0xf9, 0xe5, 0xf5, -0x1, -0x1, 0xe1, 0xf1, -0x1],		//SBC
	SEC: [0x38, -0x1, -0x1, -0x1, -0x1, -0x1, -0x1, -0x1, -0x1, -0x1, -0x1, -0x1],		//SEC
	SED: [0xf8, -0x1, -0x1, -0x1, -0x1, -0x1, -0x1, -0x1, -0x1, -0x1, -0x1, -0x1],		//SED
	SEI: [0x78, -0x1, -0x1, -0x1, -0x1, -0x1, -0x1, -0x1, -0x1, -0x1, -0x1, -0x1],		//SEI
	STA: [-0x1, -0x1, 0x8d, 0x9d, 0x99, 0x85, 0x95, -0x1, -0x1, 0x81, 0x91, -0x1],		//STA
	STX: [-0x1, -0x1, 0x8e, -0x1, -0x1, 0x86, -0x1, 0x96, -0x1, -0x1, -0x1, -0x1],		//STX
	STY: [-0x1, -0x1, 0x8c, -0x1, -0x1, 0x84, 0x94, -0x1, -0x1, -0x1, -0x1, -0x1],		//STY
	TAX: [0xaa, -0x1, -0x1, -0x1, -0x1, -0x1, -0x1, -0x1, -0x1, -0x1, -0x1, -0x1],		//TAX
	TAY: [0xa8, -0x1, -0x1, -0x1, -0x1, -0x1, -0x1, -0x1, -0x1, -0x1, -0x1, -0x1],		//TAY
	TSX: [0xba, -0x1, -0x1, -0x1, -0x1, -0x1, -0x1, -0x1, -0x1, -0x1, -0x1, -0x1],		//TSX
	TXA: [0x8a, -0x1, -0x1, -0x1, -0x1, -0x1, -0x1, -0x1, -0x1, -0x1, -0x1, -0x1],		//TXA
	TXS: [0x9a, -0x1, -0x1, -0x1, -0x1, -0x1, -0x1, -0x1, -0x1, -0x1, -0x1, -0x1],		//TXS
	TYA: [0x98, -0x1, -0x1, -0x1, -0x1, -0x1, -0x1, -0x1, -0x1, -0x1, -0x1, -0x1]		//TYA
}
//#endregion 汇编码查询表

//#region 每个指令对应最长指令占用长度
/**每个指令对应最长指令占用长度 */
export const InstrumentCodeMaxLength = {
	ADC: 3, AND: 3, ASL: 3,
	BCC: 2, BCS: 2, BEQ: 2, BIT: 3, BMI: 2, BNE: 2, BPL: 2, BRK: 1, BVC: 2, BVS: 2,
	CLC: 1, CLD: 1, CLI: 1, CLV: 1, CMP: 3, CPX: 3, CPY: 3,
	DEC: 3, DEX: 1, DEY: 1,
	EOR: 3,
	INC: 3, INX: 1, INY: 1,
	JMP: 3, JSR: 3,
	LDA: 3, LDX: 3, LDY: 3, LSR: 3,
	NOP: 1,
	ORA: 3,
	PHA: 1, PHP: 1, PLA: 1, PLP: 1,
	ROL: 3, ROR: 3, RTI: 1, RTS: 1,
	SBC: 3, SEC: 1, SED: 1, SEI: 1, STA: 3, STX: 3, STY: 3,
	TAX: 1, TAY: 1, TSX: 1, TXA: 1, TXS: 1, TYA: 1
}
//#endregion 每个指令对应最长指令占用长度

/**判断条件最大最小值 */
export const ConfidentAddressValue = { Max: 127, Min: -128 };

/**每个汇编数据占用字节长度 */
export const AddressLength = [1, 2, 3, 3, 3, 2, 2, 2, 3, 2, 2, 2];

//#region 寻址方式
/**寻址方式 */
export enum AddressType {
	/**单操作 */
	Implied,
	/**立即数 */
	Immediate,
	/**绝对寻址 */
	Absolute,
	/**绝对寻址X偏转 */
	Absolute_X,
	/**绝对寻址Y偏转 */
	Absolute_Y,
	/**零页寻址 */
	ZeroPage,
	/**零页寻址X偏转 */
	ZeroPage_X,
	/**零页寻址Y偏转 */
	ZeroPage_Y,
	/**相对寻址 */
	Indirect,
	/**相对寻址X */
	Indirect_X,
	/**相对寻址Y */
	Indirect_Y,
	/**比较数寻址 */
	Conditional,
	/**找不到类型 */
	NULL
}
//#endregion 寻址方式

//#region 寻址正则表达式
/**寻址正则表达式 */
export const AddressRegex = {
	/**立即寻址 */
	Immediate: "(?<=#).*",
	/**X偏转 */
	XOffset: ".*?(?=\\s*\\,\\s*[xX]$)",
	/**Y偏转 */
	YOffset: ".*(?=\\s+\\,\\s+[yY]\\s*$)",
	/**相对 */
	Indirect: "(?<=\\().*?(?=\\)\\s*$)",
	/**相对X偏转 */
	Indirect_X: "(?<=\\().*?(?=,\\s*[xX]\\s*\\)\\s*$)",
	/**相对Y偏转 */
	Indirect_Y: "(?<=\\().*?(?=\\)\\s*,\\s*[yY]\\s*$)"
}
//#endregion 寻址正则表达式

//#region 命令查询表
/**命令查询表 */
export const AssemblerCommands = [
	".BASE", ".ORG",
	".DEF",
	".INCLUDE", ".INCBIN",
	".IF", ".ELSEIF", ".ELSE", ".ENDIF",
	".IFDEF", ".IFNDEF",
	".DB", ".DW", ".DBG", ".DWG", ".ENDD", ".HEX",
	".REPEAT", ".ENDR",
	".MACRO", ".ENDM",
	".MSG"
];
//#endregion 命令查询表

//#region 常量类
class MyConst {
	static GetAsm6502Regex(): string {
		let result = "(^|\\s+)(";
		for (let key in InstrumentTable)
			result += key + "|"

		result = result.substring(0, result.length - 1);
		result += ")(\\s+|$)";

		return result;
	}

	static GetCommandRegex(): string {
		let result = "(^|\\s+)(";
		AssemblerCommands.forEach(
			value => result += `\\${value}|`
		);

		result = result.substring(0, result.length - 1);
		result += ")(\\s+|$)";

		return result;
	}

	static GetAutoUpperCaseRegex(): string {
		let result = "(^|\\s+)(";

		for (let key in InstrumentTable)
			result += key + "|"

		AssemblerCommands.forEach(
			value => result += `\\${value}|`
		);

		result = result.substring(0, result.length - 1);
		result += ")(\\s+|$)";

		return result;
	}

	static GetIgnoreCommaRegex() {
		let result = "(^|\\s+)(";

		for (let key in InstrumentTable)
			result += key + "|"

		result = result.substring(0, result.length - 1);
		result += ")\\s+.+\,";
		return result;
	}

	static GetIgnoreWords() {
		const commands = [".HEX", ".DBG", ".DWG", ".MACRO"];

		let result = "(^|\\s+)(";

		commands.forEach(value => {
			result += `\\${value}|`;
		});

		result = result.substring(0, result.length - 1);
		result += ")\\s+.+\,";
		return result;
	}
}
//#endregion 常量类

/**临时变量正则表达式 */
export const TempMarkReg = "^(\\++|\\-+)";

/**变量内不允许存在的字符 */
export const IllegalMark = "(^\\d)|\\+|\\-|\\*|\\.|\\/|\\=|\"|\\$|!|@|#|~|\\,|\\s|\\[|\\]|\\(|\\)";

/**运算符号正则表达式 */
// export const ComputeMark = "\\s*(\"[^\"]*\")|#|(\\!=)|(<>)|(<<)|(>>)|(==)|(&&)|(\\|\\|)|\\+|\\-|\\*|\\/|=|>|<|\\(|\\)|%|\\||&|\\!|\\^\\s*";

/**6502汇编指令正则表达式 */
export const Asm6502Regex = MyConst.GetAsm6502Regex();
export const IgnoreCommaRegex = MyConst.GetIgnoreCommaRegex();
export const AsmCommandRegex = MyConst.GetCommandRegex();
export const AutoUpperCaseRegex = MyConst.GetAutoUpperCaseRegex();